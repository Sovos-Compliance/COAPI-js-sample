const axios = require('../config.js');
const { v4: uuidv4 } = require('uuid');
const md5 = require('md5');
const requestHelpers = require('./requests.js');

module.exports = {
    /**
     * With this method we request an access token. We also do simple
     * caching using process.env. In this way, we will not be requesting
     * a second access token while we have a valid access token.
     * 
     * For more information, please visit:
     * [developer guide](https://developer-guide.sovos.com/connect-once-api/general-concepts/api-specifications/authentication)
     * 
     * @returns {Promise<string>}
     */
    async getAccessToken() {
        if (new Date().getTime() >= (process.env.ACCESS_TOKEN_EXPIRE || 0)) {
            let response;

            try {
                response = await axios.post('/oauth/client_credential/accesstoken', [], {
                    params: {
                        grant_type: 'client_credentials'
                    },
                    auth: {
                        username: process.env.API_KEY,
                        password: process.env.SECRET_KEY
                    }
                });

                process.env.ACCESS_TOKEN = response.data.access_token;
                process.env.ACCESS_TOKEN_EXPIRE = new Date().getTime() +
                    (response.data.expires_in * 1000);
            } catch (error) {
                requestHelpers.handleNetworkError(error);
            }
        }

        return process.env.ACCESS_TOKEN;
    },
    /**
     * You need some specific fields in the header when sending an API request.
     * Please pay attention to Correlation Id header.
     * 
     * If you are sending a post request, you will also need
     * "X-Idempotency-Key" header.
     * Please refer to generateIdempotencyKey() helper function for more detail.
     * 
     * Please remember that this is an async function since the function may
     * also generate an access token if necessary.
     * 
     * You may want to refer to the documentation for any further details or fields.
     * 
     * For more information, please visit:
     * [developer guide](https://developer-guide.sovos.com/connect-once-api/general-concepts/api-specifications)
     * 
     * @param {Object} [options={}] specify options for the headers
     * @param {boolean} [options.isPostRequest=false] specify whether it is a POST request
     * @param {Object} [options.payload] if it is a POST request, you must provide
     * the payload for an idempotency key to be generated.
     */
    async generateRequestHeaders(options={}) {
        const token = await this.getAccessToken();
        const headers = {
            'Content-Type': 'application/json; charset=utf-8',
            'Authorization': `Bearer ${token}`,
            'x-correlationId': this.generateCorrelationId(),
        }
        if (options.isPostRequest) {
            const payload = JSON.stringify(options.payload)
            headers['X-Idempotency-Key'] = this.generateIdempotencyKey(payload);
        }

        return headers;
    },
    /**
     * "x-correlationId" must be set to a universally unique identifier (UUID).
     * This value can be used to track transactions for debugging purposes.
     * 
     * This is not the only correct way to generate a correlation id.
     * You have to make your own implementation.
     */
    generateCorrelationId() {
        return uuidv4();
    },
    /**
     * An idempotency key is a unique value generated by the client which
     * the server uses to recognize subsequent retries of the same request.
     * 
     * This is not the only correct way to generate an idempotency key.
     * You have to make your own implementation.
     * 
     * For more information, please visit:
     * [developer guide](https://developer-guide.sovos.com/connect-once-api/general-concepts/idempotent-requests)
     * 
     * @param {string} payload
     */
    generateIdempotencyKey(payload) {
        return md5(payload);
    },
};